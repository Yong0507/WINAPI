◆숫자 생성 방법  - Class의 생성자를 활용 + Vector 컨테이너 사용

내 프로그램은 2, 4, 8, 16 등등의 숫자 블럭들을 Numbers 라는 클래스로 관리한다.
이 Numbers라는 클래스의 생성자에서 하는 일에 대해 설명해보겠다.

1. 숫자가 처음 생성되는 (Ex. 5칸 중에 몇번째 칸에서 처음 나타날 것인가) 위치를 랜덤하게 설정해준다.

2. Numbers의 생성자에서는 int값을 인자로 하나 받게 되어 있는데 이 인자 값이 무슨 값이냐에 따라서 숫자 블럭이
어떠한 숫자인지 정해진다.

3. Numbers라는 클래스를 vector로 관리한다  --> vector<Numbers> numbers;

4. 이 vector에 push_back을 할 때 인자값으로 0~100 사이의 값을 준다.

        srand((unsigned)time(NULL));
        rate = rand() % 100;
        numbers.push_back(Numbers(rate));
 
5. 다시 Numbers의 생성자로 와보면 인자로 받은 r의 범위에 따라 숫자를 지정해준것을 볼 수 있다

Numbers(int r) : .... 생략 ...... 
{
    if (r의 범위가 0~25)   --> 숫자 = 2
    if (r의 범위가 25~45)  --> 숫자 = 4
    if (r의 범위가 45~60)  --> 숫자 = 8
    if (r의 범위가 60~75)  --> 숫자 = 16			
    if (r의 범위가 75~85)  --> 숫자 = 32			
    if (r의 범위가 85~95)  --> 숫자 = 64			
    if (r의 범위가 95~100) --> 숫자 = 128			
}


정리해보자면 Class의 생성자에서 하나의 int형 인자를 받게 하고 이 인자값의 범위에 따라 숫자 블럭이 나오게 된다.
이 Class를 vector 컨테이너로 관리하고 있고 숫자 블럭 하나를 push_back 할 때 마다 0~100의 랜덤값이 들어가게 되면서
생성자에서 int형 인자를 받은 것을 기반으로 어떤 값이 들어왔는지에 따라서 그 값에 따라 숫자 블럭을 생성하게 된다.

◆구현 내용

PPT에 제시된 모든 내용을 구현했습니다.

◆내가 임의로 수정한 부분

(1) 블럭 숫자 비율

직접 게임을 진행하다보니 아래와 같은 비율로 하는 것이 좀 더 낫다는 생각이 들어서 수정해보았습니다.
숫자 2 :    25%
숫자 4 :    20%
숫자 6 :    15%
숫자 16 :   15%
숫자 32 :   10%
숫자 64 :   10%
숫자128 :   5%

(2) 마우스 클릭 기능을 Space에도 추가

마우스 클릭이나 Space 클릭 2개 모두 숫자 블럭이 떨어지도록 했음

◆작동 방법 및 주의 사항 

(1) 메뉴판에서 최종 목표 점수(GoalScore), 보드판 크기, 속도 3가지의 옵션을 설정한다

(2) 3가지를 모두 설정한 후에 GameStart에서 Start를 눌러준다
    --> 3가지 중 하나라도 선택하지 않으면 게임 실행 불가능
    --> 게임 실행 도중에 옵션 바꾸기 불가능

(3) Pause와 Resume은 Start와는 다른 기능임. 
Start : 3가지 옵션을 선택한 후에 게임이 처음에 시작하도록 하는 기능임.
Pause와 Resume : 게임 실행 도중에 멈췄다 다시 실행하는 기능임. 

(4) 숫자 블럭이 1칸을 지나는 시점부터는 자동으로 떨어지고 좌우 이동 불가능함.


◆핵심적인 기능 구현 방법 간략한 설명

(1) 미리보기 기능 

맨 처음에는 구현할때는 생성자에서 생성하는 순간 0~100값을 보고 숫자를 생성하게 했는데 그렇게 한다면 
미리 보기 기능을 지원 할수가 없었다.
그래서 preview_rate 와 rate 2개의 변수를 가지고 기존에 랜덤한 값(0~100)에 대한 값인 preview_rate를 rate에 
저장한 다음에 다시 preview_rate를 0~100 랜덤한 값을 뽑아내면서 rate값을 기준으로 vector에 push_back 해준다.                        

                        rate = preview_rate;
                        preview_rate = rand() % 100;

이 싸이클을 계속해서 돌면 생성자에서 생성하는 순간에 rate기준 숫자 블럭을 뽑되 preview_rate 값을 기준으로 
다음에 나오게 될 숫자 블럭이 무엇인지 알 수 있다.

(2) 충돌처리 기능 

bool find_Box(vector<Numbers>& v, Numbers& n, int arr[7][9]) 라는 함수 안에서 모든 충돌처리를 해결했다.

이 함수안에 각각의 기능을 간단하게 주석으로 달아놓았습니다. 




